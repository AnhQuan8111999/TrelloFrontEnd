[{"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\index.js":"1","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\App.js":"2","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\reportWebVitals.js":"3","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\router\\HomeUrl.js":"4","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Home.js":"5","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Board.js":"6","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Register.js":"7","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Login.js":"8","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\oauth2\\OAuth2RedirectHandler.js":"9","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\common\\NotFound.js":"10","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\Api\\func\\user.js":"11","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Header.js":"12","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Header2.js":"13","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\Api\\helpers.js":"14","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\Api\\url.js":"15","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\List\\List.js":"16","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Card\\Cards.js":"17","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Title\\Title.js":"18","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\utils\\dragDrop.js":"19","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Comment\\Task.js":"20","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\firebase\\firebase-config.js":"21"},{"size":517,"mtime":1628857887992,"results":"22","hashOfConfig":"23"},{"size":233,"mtime":1628857887990,"results":"24","hashOfConfig":"23"},{"size":375,"mtime":1628857887997,"results":"25","hashOfConfig":"23"},{"size":1366,"mtime":1628857887998,"results":"26","hashOfConfig":"23"},{"size":3684,"mtime":1628857887995,"results":"27","hashOfConfig":"23"},{"size":610,"mtime":1628857887992,"results":"28","hashOfConfig":"23"},{"size":4163,"mtime":1628857887996,"results":"29","hashOfConfig":"23"},{"size":3243,"mtime":1628857887996,"results":"30","hashOfConfig":"23"},{"size":1059,"mtime":1628857887992,"results":"31","hashOfConfig":"23"},{"size":534,"mtime":1628857887997,"results":"32","hashOfConfig":"23"},{"size":4243,"mtime":1628857887989,"results":"33","hashOfConfig":"23"},{"size":1595,"mtime":1628857887994,"results":"34","hashOfConfig":"23"},{"size":14180,"mtime":1628857887995,"results":"35","hashOfConfig":"23"},{"size":6653,"mtime":1628857887990,"results":"36","hashOfConfig":"23"},{"size":1563,"mtime":1628857887990,"results":"37","hashOfConfig":"23"},{"size":7135,"mtime":1628857887995,"results":"38","hashOfConfig":"23"},{"size":3550,"mtime":1628857887993,"results":"39","hashOfConfig":"23"},{"size":969,"mtime":1628857887996,"results":"40","hashOfConfig":"23"},{"size":455,"mtime":1628857887998,"results":"41","hashOfConfig":"23"},{"size":22055,"mtime":1628857887993,"results":"42","hashOfConfig":"23"},{"size":604,"mtime":1628857887991,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z0dwwl",{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\index.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\App.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\reportWebVitals.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\router\\HomeUrl.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Home.js",["93"],"import React, { useEffect, useState } from 'react';\r\nimport { createBoard, getAllBoard } from '../Api/func/user';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../src/style.css';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport { Button, Input } from 'antd';\r\nimport { PlusOutlined, CloseOutlined } from '@ant-design/icons';\r\n\r\nconst Home = (props) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [items, setItems] = useState([]);\r\n    let history = useHistory();\r\n\r\n    const styleBut = {\r\n        width: 300,height: '40px', background: '#43a643', borderRadius: '5px', color: '#fff', fontWeight: '500', border: 'none', margin: '20px 30px'\r\n    };\r\n    const styleInput = {\r\n        margin: '20px 15px',\r\n        width: 250,\r\n        // border: \"none\",\r\n        height: '40px',\r\n        background: '#fff',\r\n        borderRadius: '4px',\r\n        alignItems: 'center'\r\n    };\r\n    const styleButAdd = {\r\n        width: '120px',height: '40px', background: '#43a643', color: '#fff', fontWeight: 'bold', alignItems: 'center', borderRadius: '4px', border: 'none', marginBottom: '10px'\r\n    }\r\n    const styleBox = {\r\n        // width: '290px', \r\n        border: 'none', \r\n        margin: '0px 0px 0px 20px', \r\n        // background: '#EBECF0', \r\n        borderRadius: '4px',\r\n    }\r\n\r\n    const onSubmit = async () => {\r\n        await createBoard({\r\n            title: title\r\n        });\r\n        getData();\r\n        setOpen(false);\r\n    }\r\n    const getData = async () => {\r\n        const rest = await getAllBoard({\r\n        })\r\n        setItems(rest.data);\r\n        console.log(items);\r\n    }\r\n    useEffect(() => {\r\n        const token = localStorage.getItem(\"TOKEN\");\r\n        if(token == null){\r\n            history.push(\"/\")\r\n        }\r\n        getData();\r\n    }, []);\r\n\r\n    const listBoard = items.map((x, index) => (\r\n        <li key={x.boardId} style={{marginLeft:\"20px\"}}>\r\n            <Link to={'/board/' + x.boardId} >\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col-4\">\r\n                        <div className=\"card\" style={{ width: '18rem' }}>\r\n                            <div className=\"card-body\">\r\n                                <h5 className=\"card-title\">{x.title}</h5>\r\n                                {/* <p className=\"card-text\">{x.createDate}</p> */}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        </li>\r\n    ))\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"container\">\r\n                <ul>\r\n                    {listBoard}\r\n                    <div className=\"container\">\r\n                        {open ? (\r\n                            <div style={styleBox} >\r\n                                <Input id='title' onChange={e => setTitle(e.target.value)} type=\"text\" style={styleInput} placeholder=\"Tiêu đề của bảng\"></Input>\r\n                                <button onClick={onSubmit} style={styleButAdd}>Thêm</button>\r\n                                <CloseOutlined onClick={() => setOpen(false)} style={{ cursor: 'pointer', marginLeft: '10px' }} />\r\n                            </div>\r\n                        ) : (\r\n                            <Button onClick={() => setOpen(!open)} style={styleBut}>\r\n                                <PlusOutlined /> Thêm Bảng\r\n                            </Button>\r\n                        )}\r\n                    </div>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Home;","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Board.js",["94"],"import React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport Header2 from './Header2';\r\nimport List from './List/List'\r\n\r\nfunction Board(props) {\r\n    let history = useHistory();\r\n    useEffect(() =>{\r\n        const token = localStorage.getItem(\"TOKEN\");\r\n        if(token == null){\r\n            history.push(\"/\")\r\n        }\r\n    },[])\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <Header2 id={props.match.params.id}/>\r\n            <List id = {props.match.params.id}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Register.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Login.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\oauth2\\OAuth2RedirectHandler.js",["95"],"import React from 'react';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nfunction OAuth2RedirectHandler (props) {\r\n    const  getUrlParameter = (name) => {\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n\r\n        var results = regex.exec(props.location.search);\r\n        return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\r\n    };\r\n          \r\n        const token = getUrlParameter('token');\r\n        const error = getUrlParameter('error');\r\n\r\n        if(token) {\r\n            localStorage.setItem(\"TOKEN\", token);\r\n            return <Redirect to={{\r\n                pathname: \"/home\",\r\n                state: { from: props.location }\r\n            }}/>; \r\n        } else {\r\n            return <Redirect to={{\r\n                pathname: \"/\",\r\n                state: { \r\n                    from: props.location,\r\n                    error: error \r\n                }\r\n            }}/>; \r\n        }\r\n}\r\n\r\nexport default OAuth2RedirectHandler;","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\common\\NotFound.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\Api\\func\\user.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Header.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Header2.js",["96","97","98","99","100"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport { LockOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { Button, Layout, Avatar} from 'antd';\r\nimport './header2.css'\r\nimport { deleteUserToBoardApi, getAllUserBoard, getAllUserToAddToBoard, postUserToBoardApi } from '../Api/func/user';\r\n\r\nfunction Header2(id) {\r\n    const styleHead2 = {\r\n        position: \"relative\",\r\n        background: '#6D8DDF',\r\n        height: '60px',\r\n        marginTop: '6px',\r\n        padding: '0px'\r\n    };\r\n    const styleButton = {\r\n        margin: 'auto 5px',\r\n        background: '#B9CFFB',\r\n        color: '#fff',\r\n        fontWeight: 'bold',\r\n        height: '40px',\r\n        border: 'none',\r\n    };\r\n    const styleAvatar = {\r\n        width: \"40px\",\r\n        height: \"40px\",\r\n        color: '#000',\r\n        textAlign: \"center\",\r\n        backgroundColor: '#fff',\r\n        fontSize: '12px',\r\n        fontWeight: '500',\r\n        // margin: 'auto 1px auto 0',\r\n        borderRadius: '50%'\r\n    };\r\n\r\n    const invite_popup = {\r\n        width: \"300px\",\r\n        height: \"400px\",\r\n        position: 'absolute',\r\n        top: '33px',\r\n        left: '4px',\r\n        backgroundColor: '#ffffff',\r\n        border: 'solid 1px #e7eaf0',\r\n        borderRadius: '5px',\r\n        zIndex: '1'\r\n    }\r\n\r\n    //state\r\n    const [userSearch, setuserSearch] = useState([]);\r\n    const [userAdded, setuserAdded] = useState([]);\r\n    const [email, setemail] = useState(\"\");\r\n    const [error, seterror] = useState(\"1\");\r\n    const [users, setusers] = useState([]);//danh sach nguoi trong bang\r\n    const [userDetail, setuserDetail] = useState({})\r\n\r\n    //ref\r\n    const textInput = useRef(null);\r\n\r\n    const btnInviteOnclick = () => {\r\n        var x = document.getElementById(\"invitePopup\");\r\n        document.getElementById(\"focus\").focus();\r\n        x.classList.toggle(\"isHide\");\r\n        const userDetail = document.getElementById(\"detail-user\");\r\n        userDetail.classList.add(\"isHide\");\r\n        setuserSearch([]);\r\n        setuserAdded([]);\r\n        seterror(\"1\");\r\n        textInput.current.focus();\r\n    }\r\n\r\n    //đóng invite\r\n    const btnCloseInviteOnClick = () => {\r\n        var x = document.getElementById(\"invitePopup\");\r\n        x.classList.add(\"isHide\");\r\n    }\r\n\r\n    //change email\r\n    const EmailOnChange = (e) => {\r\n        if (e.target.value) {\r\n            setemail(e.target.value);\r\n        }\r\n    }\r\n\r\n\r\n    //Đóng popup danh sách người dùng trong bảng - X\r\n    const btnCloseListUser = () => {\r\n        const dom = document.getElementById(\"popup-list-users\");\r\n        dom.classList.add(\"isHide\");\r\n    }\r\n\r\n    //Tìm Kiếm người dùng\r\n    const btnSearchOnClick = async (e) => {\r\n        try {\r\n            var users = await getAllUserToAddToBoard({\r\n                boardId: id.id,\r\n                keyword: email\r\n            });\r\n\r\n            console.log(users.data);\r\n            if (users.data.length > 0) {\r\n                setuserSearch(users.data);\r\n                seterror(\"1\");\r\n            }\r\n            else {\r\n                seterror(\"2\");\r\n                setuserSearch([]);\r\n            }\r\n        } catch (ex) {\r\n            seterror(\"Không tìm thấy kết quả\");\r\n            setuserSearch([]);\r\n        }\r\n    }\r\n\r\n    //Thêm vào danh sách add\r\n    const addToListInvite = (e) => {\r\n        if (!userAdded.includes(e)) {\r\n            setuserAdded([...userAdded, e]);\r\n        }\r\n    }\r\n\r\n    //Xoá khỏi danh sách mời vào bảng\r\n    const removeToListInvite = (obj) => {\r\n        console.log(\"obj Remove: \", obj)\r\n        var arr = userAdded;\r\n        console.log(\"arr: \", arr)\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (obj.id === arr[i].id) {\r\n                arr.splice(i, 1);\r\n            }\r\n        }\r\n        console.log(\"Sau khi remove: \", userAdded)\r\n        setuserAdded([...arr]);\r\n\r\n    }\r\n\r\n    //thêm người vào bảng\r\n    const btnAddUserOnClick = async (e) => {\r\n        if (userAdded.length > 0) {\r\n            for (let i = 0; i < userAdded.length; i++) {\r\n                var u_id = userAdded[i].id;\r\n                var b_id = id.id;\r\n                var user_b = {\r\n                    userId: u_id,\r\n                    fullName: userAdded[i].fullName,\r\n                    email: userAdded[i].email\r\n                }\r\n                await postUserToBoardApi({\r\n                    userId: u_id,\r\n                    boardId: b_id\r\n                }).then(res => {\r\n                    console.log(\"res: \", res);\r\n                    setusers([...users, user_b])\r\n                });\r\n            }\r\n            btnCloseInviteOnClick();\r\n        }\r\n    }\r\n\r\n    //Hien thi danh sach nguoi dung\r\n    const showModelDetailUser = () => {\r\n        //An Hien danh sach\r\n        const dom = document.getElementById(\"popup-list-users\");\r\n        dom.classList.toggle(\"isHide\");\r\n\r\n        //an chi tiet\r\n        const domDetail = document.getElementById(\"detail-user\");\r\n        domDetail.classList.add(\"isHide\");\r\n    }\r\n\r\n    const { Header } = Layout;\r\n    // Get all user\r\n    const getAllUsers = async () => {\r\n        const users = await getAllUserBoard({\r\n            boardId: id.id\r\n        });\r\n        return users;\r\n    }\r\n\r\n    // Chi tiết user\r\n    const DetailUser = (obj) => {\r\n        //an danh sach\r\n        const domList = document.getElementById(\"popup-list-users\");\r\n        domList.classList.add(\"isHide\");\r\n        //hien thi chi tiet\r\n        const dom = document.getElementById(\"detail-user\");\r\n        dom.classList.toggle(\"isHide\");\r\n        //an invite\r\n        const invite = document.getElementById(\"invitePopup\");\r\n        invite.classList.add(\"isHide\")\r\n        console.log(obj)\r\n\r\n        setuserDetail(obj);\r\n    }\r\n\r\n\r\n\r\n    //Đóng chi tiết người dùng\r\n    const btnCloseOnClick = () => {\r\n        const dom = document.getElementById(\"detail-user\");\r\n        dom.classList.add(\"isHide\");\r\n    }\r\n\r\n    //Xử lý Rời khỏi bảng\r\n    const btnLeaveUserOnClick = async () => {\r\n        console.log(\"Chi tiết ngừi dùng rời khỏi bảng: \", userDetail)\r\n        await deleteUserToBoardApi({\r\n            userId: userDetail.id,\r\n            boardId: id.id\r\n        }).then(async () => {\r\n            const allUsers = await getAllUsers();\r\n            if (allUsers) {\r\n                const dom = document.getElementById(\"detail-user\");\r\n                dom.classList.add(\"isHide\");\r\n                setusers(allUsers.data);\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    // useEffect\r\n    useEffect(async () => {\r\n        const getAll = async () => {\r\n            const allUsers = await getAllUsers();\r\n            console.log(\"user: \", allUsers);\r\n            if (allUsers)\r\n                setusers(allUsers.data);\r\n        }\r\n        console.log(id.id)\r\n        getAll();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <Header style={styleHead2}>\r\n            <div style={{ margin: 'auto 20px', display: 'flex', justifyContent: 'space-between' }}>\r\n                <div>\r\n                    <Button style={styleButton}><LockOutlined /> Private</Button>\r\n                    {\r\n                        users.map((user, index) => {\r\n                            return (index < 2) ?\r\n                                <Button onClick={() => DetailUser(user)} key={user.id} style={styleAvatar}>{(user.fullName) ? user.fullName.charAt(0) : \"\"}</Button>\r\n                                : \"\";\r\n                        })\r\n                    }\r\n\r\n                    {/* Chi tiết người dùng */}\r\n                    <div id=\"detail-user\" className=\"isHide\">\r\n                        <button onClick={btnCloseOnClick} className=\"btnClose\">X</button>\r\n                        <div className=\"flex detail-user__header\">\r\n                            <div className=\"header__avatar\">\r\n                                <Avatar className=\"circle_avatar\">{(userDetail.fullName) ? userDetail.fullName.charAt(0).toUpperCase() : \"\"}</Avatar>\r\n                            </div>\r\n\r\n                            <div className=\"infor-user\">\r\n                                <div className=\"infor-user_name\">{userDetail.fullName}</div>\r\n                                <div className=\"infor-user_email\">{userDetail.email}</div>\r\n                            </div>\r\n                        </div>\r\n                        {/* 3 chúc năng */}\r\n                        <div className=\"btn-option-user\">\r\n                            <Button className=\"btn\">Thay Đổi quyền</Button>\r\n                        </div>\r\n                        <div className=\"btn-option-user\">\r\n                            <Button className=\"btn\">Xem hoạt đông của thành viên trong bảng</Button>\r\n                        </div>\r\n                        <div className=\"btn-option-user\">\r\n                            <Button onClick={btnLeaveUserOnClick} className=\"btn\">Rời khỏi bảng</Button>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <Button onClick={showModelDetailUser} style={styleAvatar} className=\"btn-plus-user\">\r\n                        <PlusOutlined />{((users.length - 2) > 0) ? (users.length - 2) : \"\"}\r\n                    </Button>\r\n                    <div id=\"popup-list-users\" className=\"popup-list-users isHide\">\r\n                        <button onClick={btnCloseListUser} className=\"btnCloseListUser\">X</button>\r\n                        <div style={{ margin: \"10px 0 0 20px\", lineHeight: \"20px\" }} >Danh sách người dùng</div>\r\n                        <hr style={{ width: \"90%\", margin: \"10px 0 0 10px\" }} />\r\n                        {\r\n                            users.map((user, index) => (\r\n                                <Button onClick={() => DetailUser(user)} key={index} style={styleAvatar}>\r\n                                    {(user.fullName) ? user.fullName.charAt(0) : \"\"}\r\n                                </Button>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    {/* Button Invite */}\r\n                    <span style={{ position: \"relative\" }}>\r\n                        <Button onClick={btnInviteOnclick} style={styleButton}>\r\n                            Invite\r\n                        </Button>\r\n                        <div id=\"invitePopup\" style={invite_popup} className=\"isHide\">\r\n                            <button onClick={btnCloseInviteOnClick} className=\"btnClose\" style={{ lineHeight: \"normal\" }}>X</button>\r\n                            <div style={{ height: \"20px\", textAlign: \"center\", lineHeight: \"20px\", marginTop: \"5px\", alignItems: \"center\" }}>\r\n                                Mời vào bảng\r\n                            </div>\r\n                            <hr style={{ width: \"90%\", margin: \"10px 0 0 10px\" }} />\r\n                            <div>\r\n                                <input id=\"focus\" ref={textInput} onChange={EmailOnChange} style={{ height: \"32px\", marginLeft: \"13px\" }} type=\"text\" placeholder=\"Địa chỉ email hoặc tên\" />\r\n                                <Button style={{ marginLeft: \"10px\" }} onClick={btnSearchOnClick}>Tìm Kiếm</Button>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <ul style={{ listStyleType: \"none\", margin: \"0 0 0 20px\", padding: \"0\", height: \"110px\" }}>\r\n                                    {\r\n                                        userSearch.map((obj, index) => (\r\n                                            <li key={index} style={{ height: \"25px\", marginTop: \"2px\" }}>\r\n                                                <Button style={{ height: \"25px\", lineHeight: \"18px\", border: \"none\", borderRadius: \"10px\", backgroundColor: \"#6d8ddf\", color: \"#fff\" }}\r\n                                                    onClick={() => addToListInvite(obj)}>\r\n                                                    {obj.email}\r\n                                                </Button>\r\n                                                {/* <hr/> */}\r\n                                            </li>\r\n                                        ))\r\n                                    }\r\n                                </ul>\r\n                            </div>\r\n\r\n                            <div style={{ textAlign: \"center\", fontSize: \"16px\" }}>{(error != \"1\") ? \"Không tìm thấy\" : \"\"}</div>\r\n                            <hr style={{ width: \"90%\", margin: \"10px 0 0 10px\" }} />\r\n\r\n                            <div>\r\n                                <ul style={{ listStyleType: \"none\", margin: \"0 0 0 20px\", padding: \"0\", height: \"150px\"  }}>\r\n                                    {\r\n                                        userAdded.map((obj, index) => (\r\n                                            <li key={index} style={{ height: \"25px\", marginTop: \"5px\" }}>\r\n                                                <Button\r\n                                                    style={{ height: \"25px\", lineHeight: \"18px\", border: \"none\", borderRadius: \"10px\", backgroundColor: \"#b9cffb\", color: \"#fff\" }}\r\n                                                    onClick={() => removeToListInvite(obj)}\r\n                                                >\r\n                                                    {obj.email}\r\n                                                </Button>\r\n                                            </li>\r\n                                        ))\r\n                                    }\r\n                                </ul>\r\n                            </div>\r\n\r\n                            <div style={{ position: \"absolute\", bottom: \"10px\", left: \"25px\" }}>\r\n                                <Button onClick={btnAddUserOnClick} className=\"btnAddUser\" style={{ width: \"250px\", backgroundColor: \"#0079bf\", color: \"#fff\" }}  disabled={(userAdded.length == 0)}>\r\n                                    THÊM VÀO BẢNG\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n        </Header>\r\n    )\r\n}\r\n\r\nexport default Header2\r\n","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\Api\\helpers.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\Api\\url.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\List\\List.js",["101"],"import React, { useEffect, useState, useCallback } from 'react';\r\nimport { Button, Dropdown, Modal } from 'antd';\r\nimport { createWorkList, getAllWorkList, updateDisplayOrderTask, updateDisplayOrderWorkList, deleteWorkList } from '../../Api/func/user';\r\nimport { PlusOutlined, CloseOutlined, DashOutlined } from '@ant-design/icons';\r\nimport Cards from '../Card/Cards';\r\nimport { Container, Draggable } from 'react-smooth-dnd';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Title from '../Title/Title';\r\nimport './list.css';\r\nimport { applyDrag } from '../../utils/dragDrop';\r\n\r\nfunction List(props) {\r\n    const [lists, setLists] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [workList, setworkList] = useState();\r\n\r\n    const [addId, setAddId] = useState(-1);\r\n    const [removeId, setRemoveId] = useState(-1);\r\n    const [addedIndex, setAddedIndex] = useState(-1);\r\n    const [removedIndex, setRemovedIndex] = useState(-1);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        reload();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [fetchData])\r\n\r\n    const onSubmit = async () => {\r\n        await createWorkList({\r\n            boardId: props.id,\r\n            title: workList\r\n        });\r\n        reload();\r\n        setOpen(false);\r\n    }\r\n    const reload = async () => {\r\n        const res = await getAllWorkList({\r\n            boardId: props.id\r\n        });\r\n        if (res.data != null) {\r\n            setLists(res.data);\r\n        }\r\n    }\r\n\r\n    const resetTitle = (workListId, title) =>{\r\n        let newColums = [...lists]\r\n        newColums=  newColums.map(x => {\r\n            if(x.workListId === workListId){\r\n                x.title = title;\r\n            }\r\n            return x;\r\n        })\r\n        setLists(newColums);\r\n    }\r\n\r\n    const onColumnDrop = async (dropResult) => {\r\n        let newColums = [...lists]\r\n        newColums = applyDrag(newColums, dropResult)\r\n        setLists(newColums)\r\n        await updateDisplayOrderWorkList({\r\n            boardId: props.id,\r\n            addedIndex: dropResult.addedIndex,\r\n            removeIndex: dropResult.removedIndex\r\n        });\r\n    }\r\n\r\n    const updateTask = async () => {\r\n        await updateDisplayOrderTask({\r\n            removeId: removeId,\r\n            removedIndex: removedIndex,\r\n            addId: addId,\r\n            addedIndex: addedIndex\r\n        });\r\n    }\r\n    const onCardDrop = (workListId, dropResult) => {\r\n        if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\r\n            let newColums = [...lists]\r\n            let currenColumn = newColums.find(x => x.workListId === workListId)\r\n            currenColumn.tasks = applyDrag(currenColumn.tasks, dropResult)\r\n            setLists(newColums);\r\n            if (dropResult.removedIndex !== null) {\r\n                setRemoveId(workListId);\r\n                setRemovedIndex(dropResult.removedIndex);\r\n            }\r\n            if (dropResult.addedIndex !== null) {\r\n                setAddId(workListId);\r\n                setAddedIndex(dropResult.addedIndex);\r\n\r\n            }\r\n            console.log(dropResult);\r\n        }\r\n    }\r\n    if (addedIndex !== -1 && addId !== -1 && removedIndex !== -1 && removeId !== -1) {\r\n        updateTask();\r\n        setAddId(-1);\r\n        setAddedIndex(-1);\r\n        setRemovedIndex(-1);\r\n        setRemoveId(-1);\r\n    }\r\n    // delete workList\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [listId, setListId] = useState(\"\");\r\n    const showModal = (listId) => {\r\n        setListId(listId);\r\n        setIsModalVisible(true);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    const handleDeleteList = () => {\r\n        deleteList(listId);\r\n        setIsModalVisible(false)\r\n    };\r\n    function deleteList(id) {\r\n        let newColums = [...lists];\r\n        let displayOrder = newColums.find(x => x.workListId === id).displayOrder;\r\n        newColums = newColums.filter(x => x.workListId !== id);\r\n        newColums = newColums.map(x => {\r\n            if (x.displayOrder > displayOrder) {\r\n                x.displayOrder = x.displayOrder - 1;\r\n            }\r\n            return x;\r\n        })\r\n        setLists(newColums);\r\n        deleteWL(id);\r\n\r\n    }\r\n    const deleteWL = async (id) => {\r\n        await deleteWorkList({\r\n            workListId: id\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex', background: \"green\", overflow: 'scroll', height: '82vh' }}>\r\n            <Container\r\n                orientation=\"horizontal\"\r\n                onDrop={onColumnDrop}\r\n                getChildPayload={index => lists[index]}\r\n                dropPlaceholder={{\r\n                    animationDuration: 150,\r\n                    showOnTop: true,\r\n                    className: 'cards-drop-preview'\r\n                }}>\r\n                {lists.map((list, index) => (\r\n                    <Draggable key={index}>\r\n                        <div className=\"column\" >\r\n                            <div className=\"title\" >\r\n                                <Title listId={list.workListId} title={list.title} resetTitle={resetTitle}></Title>\r\n                                <Dropdown trigger=\"click\"\r\n                                    overlay={<Button onClick={() => showModal(list.workListId)}\r\n                                        style={{ border: 'none', padding: '10px', color: '#000', borderRadius: '3px', cursor: 'pointer' }}\r\n                                    >Delete List\r\n                                    </Button>}\r\n                                    placement=\"bottomLeft\" >\r\n                                    <DashOutlined style={{ cursor: 'pointer' }} />\r\n                                </Dropdown>\r\n                            </div>\r\n                            <div className=\"card-list\">\r\n                                <Cards task={list.tasks} workListId={list.workListId} reload={reload} onCardDrop={onCardDrop} />\r\n                            </div>\r\n                        </div>\r\n                    </Draggable>\r\n                ))}\r\n            </Container>\r\n            <Modal title=\"Alert !!!\" visible={isModalVisible} width={400} onOk={handleDeleteList}\r\n                onCancel={handleCancel}>\r\n                <h3>Do you want to delete this list?</h3>\r\n            </Modal>\r\n            <div>\r\n                {open ? (\r\n                    <div className=\"box\">\r\n                        <input className=\"input\" onChange={e => setworkList(e.target.value)} type=\"text\" placeholder=\"Enter a title\"></input>\r\n                        <button className=\"button\" onClick={onSubmit}>Add list</button>\r\n                        <CloseOutlined onClick={() => setOpen(false)} style={{ cursor: 'pointer', marginLeft: '20px' }} />\r\n                    </div>\r\n                ) : (\r\n                    <Button className=\"add-new-list\" onClick={() => setOpen(!open)}>\r\n                        <PlusOutlined /> Add New List\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Card\\Cards.js",["102"],"import React, { useState } from 'react';\r\nimport { PlusOutlined, CloseOutlined } from '@ant-design/icons';\r\nimport { Modal, Typography } from 'antd';\r\nimport { createTask, testApi } from '../../Api/func/user';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Draggable } from 'react-smooth-dnd';\r\nimport './Card.css';\r\nimport 'antd/dist/antd.css'\r\nimport Task from '../Comment/Task'\r\nimport { useEffect } from 'react';\r\n\r\n\r\nfunction Cards(props) {\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [workTask, setWorkTask] = useState(\"\");\r\n    const [task, settask] = useState(\"\");\r\n    const [user, setuser] = useState({});\r\n\r\n    const {onCardDrop} = props;\r\n    const showModal = (card) => {\r\n        settask(card);\r\n        setIsModalVisible(true);\r\n        // console.log(card);\r\n    };\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const onSubmit = async () => {\r\n        await createTask({\r\n            workListId: props.workListId,\r\n            title: workTask\r\n        });\r\n        \r\n        setOpen(false);\r\n        props.reload();\r\n    }\r\n    const getUserInfor = async ()=>{\r\n        const rest=await testApi({\r\n        });\r\n        return rest.data;\r\n    }\r\n    useEffect(() => {\r\n        const getAll = async ()=>{\r\n            //user\r\n            const user = await getUserInfor();\r\n            if(user) {\r\n                setuser(user);\r\n            }\r\n        }\r\n        getAll();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Container\r\n                groupName=\"col\"\r\n                onDrop={dropResult => onCardDrop(props.workListId, dropResult)}\r\n                getChildPayload={index => props.task[index]\r\n                }\r\n                dragClass=\"card-ghost\"\r\n                dropClass=\"card-ghost-drop\"\r\n\r\n                dropPlaceholder={{\r\n                    animationDuration: 150,\r\n                    showOnTop: true,\r\n                    className: 'drop-preview'\r\n                }}\r\n                dropPlaceholderAnimationDuration={200}>\r\n                {props.task.map((card, index) => (\r\n                    <Draggable key={index}>\r\n                        <div className=\"card-item\" key={index}>\r\n                            <button className=\"typography btn-card\" onClick={()=>showModal(card)}>{card.title}</button>\r\n                        </div>\r\n                    </Draggable>\r\n                ))\r\n                }\r\n            </Container>\r\n            <div className=\"workList\">\r\n                {open ? (\r\n                    <div>\r\n                        <input onChange={e => setWorkTask(e.target.value)} type=\"text\" required className=\"input\" placeholder=\"Enter a title\"></input>\r\n                        <button type=\"button\" className=\"button\" onClick={onSubmit} >Add task</button>\r\n                        <CloseOutlined onClick={() => setOpen(false)} style={{ cursor: 'pointer', marginLeft: '80px', fontSize: '20px' }} />\r\n                    </div>\r\n                ) : (\r\n                    <button onClick={() => setOpen(!open)} className=\"add-task\" > <PlusOutlined /> Add task</button>\r\n                )}\r\n            </div>\r\n            <Modal width={1000} centered title=\"\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <Task obj={task} user={user} />\r\n            </Modal>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Title\\Title.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\utils\\dragDrop.js",[],"D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\pages\\Comment\\Task.js",["103","104","105","106","107","108"],"import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport './task.css';\r\nimport { PlusOutlined, HomeOutlined, MenuOutlined, MessageOutlined, SmileOutlined, UserAddOutlined, FieldTimeOutlined, PictureOutlined, DownOutlined } from '@ant-design/icons';\r\nimport { Button, Modal, Avatar, Form, Checkbox, Dropdown, DatePicker } from \"antd\"; // Quang\r\nimport moment from 'moment';\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { storage } from '../../firebase/firebase-config';\r\nimport { deleteDeadlineApi, deleteUserToTaskApi, getAllUserInTask, getComments, getDeadlineByTaskIdApi, getUsersToAddToTask, postCommentApi, postDeadlineToTaskApi, postUserToTaskApi, updateDeadlineApi, updateImageTask } from '../../Api/func/user';\r\n\r\nfunction Task(props) {\r\n\r\n    /**\r\n     * Quang Bổ sung phần deadline\r\n     */\r\n    // new\r\n    // deadline\r\n    const [startDate, setStartDate] = useState(\"21/01/2021\");\r\n    const [endDate, setEndDate] = useState(\"25/08/2021\");\r\n    const [done, setDone] = useState(false);\r\n    const [colorDone, setColorDone] = useState(\"\");\r\n    const [openDeadline, setOpenDeadline] = useState(false);\r\n    const [isModalDeadVisible, setIsModalDeadVisible] = useState(false);\r\n    const [deadlineDetail, setdeadlineDetail] = useState({})\r\n    const [imageModal, setImageModal] = useState(false)\r\n    const [usersModal, setUsersModal] = useState(false)\r\n\r\n    //Hien thi o nhap deadline\r\n    const showModalDead = async () => {\r\n        console.log(done);\r\n        setIsModalDeadVisible(true);\r\n    };\r\n    const handleCancelDead = () => {\r\n        setIsModalDeadVisible(false);\r\n    };\r\n\r\n    const handleSaveDeadline = async () => {\r\n        console.log(startDate);\r\n        console.log(endDate);\r\n        const dl = await getDeadlineByTaskIdApi({ taskId: props.obj.taskId });\r\n        if (!dl.data) {\r\n            await postDeadlineToTaskApi({\r\n                taskId: props.obj.taskId,\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                complete: false\r\n            }).then(res => {\r\n                console.log(res.data);\r\n                setdeadlineDetail(res.data);\r\n            }).catch(e => {\r\n                console.log(\"Loi: \", e);\r\n            });\r\n        } else {\r\n            await updateDeadlineApi({\r\n                deadlineId: deadlineDetail.deadlineId,\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                complete: !done\r\n            }).then(res => {\r\n                console.log(\"sau khi update:\", res.data)\r\n                setdeadlineDetail(res.data)\r\n            });\r\n            setOpenDeadline(true);\r\n        }\r\n\r\n        setOpenDeadline(true);\r\n        setIsModalDeadVisible(false);\r\n    };\r\n    const handleDeleteDeadline = async () => {\r\n        await deleteDeadlineApi({\r\n            deadlineId: deadlineDetail.deadlineId\r\n        });\r\n        setOpenDeadline(false);\r\n    };\r\n    function getDateValue(dates, dateStrings) {\r\n        setStartDate(dateStrings[0]);\r\n        setEndDate(dateStrings[1]);\r\n    }\r\n    const onChangeCheckColor = async () => {\r\n        setDone(!done);\r\n        {\r\n            done ? setColorDone(\"#61bd4f\") : setColorDone(\"#EBECF0\");\r\n        }\r\n        await updateDeadlineApi({\r\n            deadlineId: deadlineDetail.deadlineId,\r\n            startDate: deadlineDetail.startDate,\r\n            endDate: deadlineDetail.endDate,\r\n            complete: !done\r\n        });\r\n    };\r\n    const { RangePicker } = DatePicker;\r\n    const dateFormat = 'DD/MM/YYYY';\r\n\r\n    //state\r\n    const [comments, setcomments] = useState([]);\r\n    const [contentCmt, setcontentCmt] = useState(\"\");\r\n    const [userTask, setuserTask] = useState([]);\r\n    const [userNoTask, setuserNoTask] = useState([]);\r\n    const [image, setimage] = useState(props.obj.image);\r\n\r\n    //onchange\r\n    const commentOnChange = (e) => {\r\n        if (e.target.value) {\r\n            setcontentCmt(e.target.value);\r\n        }\r\n    }\r\n    //get all comment\r\n    const getAllComment = async () => {\r\n        const cmt = await getComments({\r\n            taskId: props.obj.taskId\r\n        });\r\n        console.log(\"list cmt: \", cmt.data)\r\n        return cmt.data;\r\n    }\r\n    //Lấy tất cả user được giao việc trong task\r\n    const getAllUserTask = async () => {\r\n        const ut = await getAllUserInTask({ taskId: props.obj.taskId })\r\n        return ut.data;\r\n    }\r\n    //Lấy tât cả user trong bảng mà ko thuộc task\r\n    const getAllUserNoTask = async () => {\r\n        const unt = await getUsersToAddToTask({ taskId: props.obj.taskId });\r\n        // const unt = await api.get(\"user_no_task\");\r\n        return unt.data;\r\n    }\r\n\r\n    //Chi tiết người dùng trong task\r\n    const detailUserTask = async (obj) => {\r\n        console.log(\"Chi tiết thằng bị đá khỏi task: \", obj);\r\n        await deleteUserToTaskApi({\r\n            userId: obj.id,\r\n            taskId: props.obj.taskId\r\n        }).then(async (res) => {\r\n            const allUserTask = await getAllUserTask();\r\n            if (allUserTask)\r\n                setuserTask(allUserTask);\r\n            const userNotask = await getAllUserNoTask();\r\n            if (userNotask)\r\n                setuserNoTask(userNotask)\r\n        });\r\n    }\r\n\r\n    //Click nut them thanh vien\r\n    //Hien thi Modal them thanh vien vao task\r\n    const showModalUsers = async () => {\r\n        const x = await getAllUserNoTask();\r\n        setuserNoTask(x);\r\n        setUsersModal(true);\r\n    };\r\n    const handleCancelModalUsers = () => {\r\n        setUsersModal(false);\r\n    };\r\n\r\n    const btnAddMemberTask = async (obj) => {\r\n        const arr = userNoTask;\r\n        console.log(\"arr: \", arr)\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (obj.id === arr[i].id) {\r\n                arr.splice(i, 1);\r\n                // console.log(arr[i]);\r\n\r\n            }\r\n        }\r\n        await postUserToTaskApi({\r\n            userId: obj.id,\r\n            taskId: props.obj.taskId\r\n        });\r\n        setuserTask([...userTask, obj])\r\n        setuserNoTask([...arr]);\r\n    }\r\n\r\n    const showModalImage = async () => {\r\n        setImageModal(true);\r\n    };\r\n    const handleCancelImageModal = () => {\r\n        // setimage(\"\");\r\n        setImageModal(false);\r\n    };\r\n\r\n    //Ảnh bìa - chọn ảnh\r\n    const imageOnChange = (e) => {\r\n        if (e.target.files[0]) {\r\n            setimage(e.target.files[0])\r\n        }\r\n    }\r\n    //Ảnh bìa - tải lên ảnh\r\n    const btnUploadImageOnClick = () => {\r\n        console.log(image.name)\r\n        if (image.name) {\r\n            var imgSplit = image.name.split(\".\");\r\n            var imgName = uuidv4() + \".\" + imgSplit[imgSplit.length - 1];\r\n            const uploadTask = storage.ref(`images/${imgName}`).put(image);\r\n            uploadTask.on(\r\n                \"state_change\",\r\n                snapshot => { },\r\n                error => {\r\n                    console.log(error);\r\n                },\r\n                () => {\r\n                    storage.ref('images')\r\n                        .child(imgName)\r\n                        .getDownloadURL()\r\n                        .then(async (url) => {\r\n                            console.log(url);\r\n                            await updateImageTask({\r\n                                taskId: props.obj.taskId,\r\n                                urlImage: url\r\n                            }).then((res) => {\r\n                                console.log(\"sau khi upload:\", res)\r\n                                setimage(res.data);\r\n                            });\r\n\r\n                        });\r\n                }\r\n            );\r\n        } else alert(\"Chwa chon anh\");\r\n    }\r\n\r\n    //post comment\r\n    const postComment = async () => {\r\n        const comment = {\r\n            taskId: props.obj.taskId,\r\n            content: contentCmt,\r\n            fullName: props.user.fullName\r\n\r\n        }\r\n        // debugger;\r\n        await postCommentApi({\r\n            taskId: props.obj.taskId,\r\n            content: contentCmt\r\n        }).then(res => {\r\n            setcomments([...comments, comment]);\r\n            setcontentCmt(\"\");\r\n        });\r\n    }\r\n\r\n    //\r\n\r\n    //useeffect\r\n    useEffect(async () => {\r\n        const dl = await getDeadlineByTaskIdApi({ taskId: props.obj.taskId });\r\n        if (!dl.data) {\r\n            console.log(\"Chua co dealine\")\r\n        } else {\r\n            setdeadlineDetail(dl.data)\r\n            setDone(dl.data.complete)\r\n            setStartDate(dl.data.startDate);\r\n            setEndDate(dl.data.endDate)\r\n            setOpenDeadline(true);\r\n        }\r\n        const getAll = async () => {\r\n            //comment\r\n            const allComment = await getAllComment();\r\n            if (allComment) {\r\n                setcomments(allComment);\r\n            }\r\n\r\n            //user_task\r\n            const allUserTask = await getAllUserTask();\r\n            if (allUserTask)\r\n                setuserTask(allUserTask);\r\n\r\n        }\r\n        setimage(props.obj.image)\r\n        getAll();\r\n    }, [props.obj.taskId])\r\n    return (\r\n\r\n        <>\r\n            {/* <Modal centered width={800} visible={isModalVisible} footer={null}  onCancel={handleCancel}> */}\r\n            <img src={(image) ? image : \"\"} className={(image === \"\" || image === null) ? \"isHide\" : \"\"} style={{ width: \"100%\", height: \"400px\", margin: \"15px 0 10px 0\" }} />\r\n            <div className=\"modal-custom\">\r\n                <div className=\"card-left\">\r\n                    {/* Tên task */}\r\n                    <div className=\"card-left__name flex mb-10\" style={{ marginTop: \"10px\" }}>\r\n                        <HomeOutlined className=\"common-icon width-10\" />\r\n                        {/* <div className=\"name-icon width-10\">icon</div> */}\r\n                        <div className=\"name-name\">Tên thẻ</div>\r\n                    </div>\r\n\r\n                    {/* Thành viên, ngày hết hạn */}\r\n                    <div className=\"card-left__memeber flex mb-10\" style={{ fontSize: \"14px\" }}>\r\n                        <div className=\"width-10\" />\r\n                        <div className=\"memeber-memeber\" >\r\n                            <div>THÀNH VIÊN</div>\r\n                            <div>\r\n                                {\r\n                                    userTask.map((obj, index) => (\r\n                                        <button key={index} onClick={() => detailUserTask(obj)} className=\"member-task\">\r\n                                            <Avatar style={{ color: '#fff', backgroundColor: '#84ABF7', fontSize: '12px', fontWeight: '500' }}>\r\n                                                {(obj.fullName) ? obj.fullName.charAt(0).toUpperCase() : \"\"}\r\n                                            </Avatar>\r\n                                        </button>\r\n                                    ))\r\n                                }\r\n                                <button onClick={showModalUsers} className=\"member-task\">\r\n                                    <Avatar style={{ color: '#fff', backgroundColor: '#84ABF7', fontSize: '12px', fontWeight: '500', margin: '0 0 0 2px' }}>\r\n                                        <PlusOutlined />\r\n                                    </Avatar>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* new */}\r\n                        {/* deadline box */}\r\n                        {openDeadline ? (\r\n                            <div className=\"memeber-deadline\" style={{ marginLeft: \"20px\" }}>\r\n                                <div>NGÀY HẾT HẠN</div>\r\n                                <div className=\"box-deadline\">\r\n                                    <div className=\"time-deadline\">\r\n                                        <Checkbox on checked={done} onChange={onChangeCheckColor} />\r\n                                        <span>\r\n                                            {endDate}\r\n                                        </span>\r\n                                        {done ? (\r\n                                            <span className=\"check-done\">Done !</span>\r\n                                        ) : (\r\n                                            <div />\r\n                                        )}\r\n                                        <Dropdown\r\n                                            trigger=\"click\"\r\n                                            overlay={\r\n                                                <Button\r\n                                                    onClick={handleDeleteDeadline}\r\n                                                    className=\"butDelete-Deadline\"\r\n                                                >\r\n                                                    Delete Deadline\r\n                                                </Button>\r\n                                            }\r\n                                            placement=\"bottomRight\"\r\n                                            arrow\r\n                                        >\r\n                                            <DownOutlined style={{ marginLeft: \"7px\" }} />\r\n                                        </Dropdown>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ) : (\r\n                            <div />\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Tiêu đề mô tả: icon và chữ mô tả chi tiết */}\r\n                    <div className=\"card-left__description flex mb-10\">\r\n                        <MenuOutlined className=\"common-icon width-10\" />\r\n                        <div className=\"des-name\">Mô tả chi tiết</div>\r\n                    </div>\r\n\r\n                    {/* Ô input nhập mô tả */}\r\n                    <div className=\"card-left__des-input flex mb-10\">\r\n                        <div className=\"width-10\"></div>\r\n                        <input style={{ padding: \"0 0 0 10px\" }} className=\"des-input\" placeholder=\"Mô tả công việc\" />\r\n                    </div>\r\n\r\n                    {/* Tiêu đề bình luận (Icon và Chữ Bình Luận) */}\r\n                    <div className=\"card-left__cmt flex mb-10\" style={{ marginTop: \"40px\" }}>\r\n                        <MessageOutlined className=\"width-10 common-icon\" />\r\n                        <div className=\"cmt-name\">\r\n                            <div>Bình luận</div>\r\n                            <Button>Ẩn chi tiết</Button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Viết bình luân (Avatar và ô input) */}\r\n                    <div className=\"card-left__cmt flex mb-10\">\r\n                        {/* <div className=\"width-10 avatar\">L</div> */}\r\n                        <Avatar style={{ color: '#fff', backgroundColor: '#84ABF7', fontSize: '12px', fontWeight: '500', margin: '5px 15px 0 12px' }}>\r\n                            L\r\n                        </Avatar>\r\n                        <input onChange={commentOnChange} value={contentCmt} style={{ padding: \"0 0 0 10px\" }} className=\"cmt-input\" placeholder=\"Viết Bình Luận\" />\r\n                    </div>\r\n\r\n                    {/* Nút bình luận */}\r\n                    <div className=\"flex mb-10\">\r\n                        <div className=\"width-10\"></div>\r\n                        <Button onClick={postComment}>Lưu</Button>\r\n                    </div>\r\n\r\n\r\n\r\n                    {/* Nội dung bình luận (avatar và nội dung bình luận) */}\r\n                    {\r\n                        comments.map((obj, index) => (\r\n                            <div key={index} className=\"card-left__cmt-content flex mb-10\">\r\n                                {/* avatar*/}\r\n                                <Avatar style={{ color: '#fff', backgroundColor: '#84ABF7', fontSize: '12px', fontWeight: '500', margin: '5px 15px 0 12px' }}>\r\n                                    {(obj.fullName) ? obj.fullName.charAt(0).toUpperCase() : \"\"}\r\n                                </Avatar>\r\n                                {/* Nội dung bình luận: tên, ngày, nội dung, reaction, sửa, xoá */}\r\n                                <div className=\"cmt-right\">\r\n                                    <div className=\"cmt-user\">\r\n                                        {/* Tên người bình luận */}\r\n                                        {obj.fullName}\r\n                                        <span className=\"cmt-date\">\r\n                                            {/* Ngày bình luận */}\r\n                                            {obj.createDate}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"cmt-content\">\r\n                                        {/* Nội dung bình luận */}\r\n                                        {obj.content}\r\n                                    </div>\r\n                                    <div className=\"cmt-react\">\r\n                                        <SmileOutlined /> - Chỉnh sửa - Xoá\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n\r\n                </div>\r\n                {/* Bên phải modal: các chức năng */}\r\n                <div className=\"card-right\">\r\n                    <div className=\"btn-right\">\r\n                        <Button onClick={showModalUsers} style={{ width: \"100%\" }}>\r\n                            <UserAddOutlined />\r\n                            Thành viên\r\n                        </Button>\r\n                        <Modal width={300} title=\"Thành viên\" visible={usersModal} footer={null} onCancel={handleCancelModalUsers} >\r\n                            <div className=\"title-member-board\">Thành viên của bảng</div>\r\n\r\n                            {/* Danh sachs thành viên trong bảng nhưng ko có trong task */}\r\n                            {\r\n                                userNoTask.map((obj, index) => (\r\n                                    <div key={index} className=\"memeber-list\">\r\n                                        <button onClick={() => btnAddMemberTask(obj)} className=\"btn-member-task\">\r\n                                            <Avatar className=\"avatar\">{(obj.fullName) ? (obj.fullName.charAt(0).toUpperCase()) : \"\"}</Avatar>\r\n                                            {obj.fullName}\r\n                                        </button>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n\r\n                            <div className=\"title-member-board\">Thành viên của Task</div>\r\n                            {\r\n                                userTask.map((obj, index) => (\r\n                                    <div key={index} className=\"memeber-list\">\r\n                                        <button onClick={() => detailUserTask(obj)} className=\"btn-member-task\">\r\n                                            <Avatar className=\"avatar\">{(obj.fullName) ? (obj.fullName.charAt(0).toUpperCase()) : \"\"}</Avatar>\r\n                                            {obj.fullName}\r\n                                        </button>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                            {/* </div> */}\r\n                        </Modal>\r\n                    </div>\r\n\r\n                    {/* new */}\r\n                    {/* Deadline */}\r\n                    <div className=\"btn-right\">\r\n                        <Button onClick={showModalDead} style={{ width: \"100%\" }}>\r\n                            <FieldTimeOutlined />\r\n                            Ngày\r\n                        </Button>\r\n                        <Modal width={300} title=\"Deadline\" visible={isModalDeadVisible} footer={null} onCancel={handleCancelDead} >\r\n                            <div>\r\n                                <Form>\r\n                                    <div className=\"title-date\">\r\n                                        <h4>Start Date</h4>\r\n                                        <h4 style={{ marginLeft: \"68px\" }}>End Date</h4>\r\n                                    </div>\r\n                                    <RangePicker defaultValue={[moment(startDate, dateFormat), moment(endDate, dateFormat)]} format={dateFormat} onChange={getDateValue} />\r\n                                    <br />\r\n                                    <Button onClick={handleSaveDeadline} style={{ marginTop: \"15px\" }} type=\"primary\">\r\n                                        Save\r\n                                    </Button>\r\n                                </Form>\r\n                            </div>\r\n                        </Modal>\r\n                    </div>\r\n\r\n                    <div className=\"btn-right\">\r\n                        <Button onClick={showModalImage} style={{ width: \"100%\" }}>\r\n                            <PictureOutlined />\r\n                            Ảnh Bìa\r\n                        </Button>\r\n                        <Modal width={400} title=\"Ảnh bìa\" visible={imageModal} footer={null} onCancel={handleCancelImageModal}>\r\n                            <div className=\"title-member-board\">Tệp Đính Kèm</div>\r\n                            <input onChange={imageOnChange} style={{ marginLeft: \"13px\" }} type=\"file\" accept=\"image/*\" />\r\n                            <Button onClick={btnUploadImageOnClick} style={{ width: \"90%\", margin: \"20px 0 0 13px\" }}>Upload</Button>\r\n                            <img className={(image === \"\" || image === null) ? \"isHide\" : \"\"} style={{ width: \"300px\", height: \"150px\", margin: \"10px 0 0 20px\" }} src={(image) ? image : \"\"} />\r\n\r\n                        </Modal>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Task;","D:\\JavaScript_ReactJs\\Code\\trello-fontend\\src\\firebase\\firebase-config.js",[],{"ruleId":"109","severity":1,"message":"110","line":58,"column":8,"nodeType":"111","endLine":58,"endColumn":10,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"113","line":14,"column":7,"nodeType":"111","endLine":14,"endColumn":9,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":6,"column":31,"nodeType":"117","messageId":"118","endLine":6,"endColumn":32,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":149,"column":25,"nodeType":"122","messageId":"123","endLine":152,"endColumn":18},{"ruleId":"109","severity":1,"message":"124","line":220,"column":15,"nodeType":"122","endLine":229,"endColumn":6},{"ruleId":"109","severity":1,"message":"125","line":229,"column":8,"nodeType":"111","endLine":229,"endColumn":10,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":318,"column":92,"nodeType":"129","messageId":"130","endLine":318,"endColumn":94},{"ruleId":"127","severity":1,"message":"131","line":339,"column":191,"nodeType":"129","messageId":"130","endLine":339,"endColumn":193},{"ruleId":"109","severity":1,"message":"132","line":24,"column":8,"nodeType":"111","endLine":24,"endColumn":10,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":3,"column":17,"nodeType":"136","messageId":"137","endLine":3,"endColumn":27},{"ruleId":"134","severity":1,"message":"138","line":21,"column":12,"nodeType":"136","messageId":"137","endLine":21,"endColumn":21},{"ruleId":"139","severity":1,"message":"140","line":81,"column":9,"nodeType":"141","messageId":"142","endLine":83,"endColumn":10},{"ruleId":"109","severity":1,"message":"124","line":240,"column":15,"nodeType":"122","endLine":266,"endColumn":6},{"ruleId":"109","severity":1,"message":"143","line":266,"column":8,"nodeType":"111","endLine":266,"endColumn":26,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":271,"column":13,"nodeType":"147","endLine":271,"endColumn":176},{"ruleId":"145","severity":1,"message":"146","line":482,"column":29,"nodeType":"147","endLine":482,"endColumn":193},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getData' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["148"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["149"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["150","151"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'user_b'.","ArrowFunctionExpression","unsafeRefs","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'getAllUsers' and 'id.id'. Either include them or remove the dependency array.",["152"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","React Hook useCallback has a missing dependency: 'reload'. Either include it or remove the dependency array.",["153"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'colorDone' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has missing dependencies: 'getAllComment', 'getAllUserTask', and 'props.obj.image'. Either include them or remove the dependency array. If 'setimage' needs the current value of 'props.obj.image', you can also switch to useReducer instead of useState and read 'props.obj.image' in the reducer.",["154"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"messageId":"159","fix":"160","desc":"161"},{"messageId":"162","fix":"163","desc":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [getData, history]",{"range":"171","text":"172"},"Update the dependencies array to be: [history]",{"range":"173","text":"174"},"removeEscape",{"range":"175","text":"176"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"177","text":"178"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [getAllUsers, id.id]",{"range":"179","text":"180"},"Update the dependencies array to be: [reload]",{"range":"181","text":"182"},"Update the dependencies array to be: [getAllComment, getAllUserTask, props.obj.image, props.obj.taskId]",{"range":"183","text":"184"},[1883,1885],"[getData, history]",[401,403],"[history]",[189,190],"",[189,189],"\\",[6776,6778],"[getAllUsers, id.id]",[1041,1043],"[reload]",[8981,8999],"[getAllComment, getAllUserTask, props.obj.image, props.obj.taskId]"]